<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLib</name>
    </assembly>
    <members>
        <member name="T:NLib.Check">
            <summary>
            Contains static methods for representing program check.
            </summary>
        </member>
        <member name="F:NLib.Check.Instance">
            <summary>
            Unique instance.
            </summary>
        </member>
        <member name="M:NLib.Check.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NLib.Check"/> class from being created.
            </summary>
        </member>
        <member name="M:NLib.Check.ThrowException``1">
            <summary>
            Throw exception of type <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The exception to throw.</typeparam>
            <exception cref="T:NLib.MissingConstructorException">The <typeparamref name="TException"/> don't have default constructor.</exception>
        </member>
        <member name="M:NLib.Check.ThrowException``1(System.String)">
            <summary>
            Throw exception of type <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The exception to throw</typeparam>
            <param name="message">The message to display</param>
            <exception cref="T:NLib.MissingConstructorException">The <typeparamref name="TException"/> don't have a constructor with one parameter of type string.</exception>
        </member>
        <member name="M:NLib.Check.ThrowException``1(System.String,System.Object)">
            <summary>
            Throw exception of type <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The exception to throw</typeparam>
            <param name="message">The message to display</param>
            <param name="arguments">
                The argument to initialize the exception.
                The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.
            </param>
            <exception cref="T:NLib.MissingConstructorException">The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.</exception>
        </member>
        <member name="P:NLib.Check.Current">
            <summary>
            Gets the current instance of <see cref="T:NLib.Check"/>.
            </summary>
        </member>
        <member name="T:NLib.CheckExtensions">
            <summary>
            Defines extensions methods for <see cref="T:NLib.Check"/>.
            </summary>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentException(NLib.Check,System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if the <paramref name="condition"/> is false.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentException(NLib.Check,System.Boolean,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if the <paramref name="condition"/> is false.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullException(NLib.Check,System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="param"/> is null.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullException``1(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.Nullable{``0}}})">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullException(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullException(NLib.Check,System.Object,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="param"/> is null.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullException``1(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.Nullable{``0}}},System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullException(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrEmptyException(NLib.Check,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="param"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null or empty.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrEmptyException(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null or empty.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrEmptyException(NLib.Check,System.String,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="param"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrEmptyException(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrWhiteSpaceException(NLib.Check,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="param"/> is null or <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null or white space.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrWhiteSpaceException(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="reference"/> is null or <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null or white space.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrWhiteSpaceException(NLib.Check,System.String,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the <paramref name="param"/> is null or  <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null or white space.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.ArgumentNullOrWhiteSpaceException(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Throws <see cref="T:System.NullReferenceException"/> if the <paramref name="reference"/> is null or  <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null or white space.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.NotNull(NLib.Check,System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.NullReferenceException"/> if the <paramref name="param"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null.</param>
            <param name="paramName">Name of the parameter.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.NotNull(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Throws <see cref="T:System.NullReferenceException"/> if the <paramref name="reference"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.NotNull(NLib.Check,System.Object,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.NullReferenceException"/> if the <paramref name="param"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="param">The parameter to check if it's null.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.NotNull(NLib.Check,System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Throws <see cref="T:System.NullReferenceException"/> if the <paramref name="reference"/> is null or <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="reference">The parameter to check if it's null.</param>
            <param name="message">The message.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Boolean)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Func{System.Boolean})">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Boolean,``0)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="exception">The exception thrown if the <paramref name="condition"/> is false.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Func{System.Boolean},``0)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="exception">The exception thrown if the <paramref name="condition"/> is false.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Boolean,System.String)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided <paramref name="message"/> if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="message">The message to display if the <paramref name="condition"/> is false.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Func{System.Boolean},System.String)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided <paramref name="message"/> if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="message">The message to display if the <paramref name="condition"/> is false.</param>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Boolean,System.Object)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided <paramref name="arguments"/> if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="arguments">
                The argument to initialize the exception.
                The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.
            </param>
            <example>
            Example:
            <code>
            Check.Current.Requires&lt;ArgumentNullException&gt;(false, new { message = "A message", paramName = "A parameter" });
            </code>
            </example>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
            <exception cref="T:NLib.MissingConstructorException">The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.</exception>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Func{System.Boolean},System.Object)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided <paramref name="arguments"/> if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="arguments">
                The argument to initialize the exception.
                The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.
            </param>
            <example>
            Example:
            <code>
            Check.Current.Requires&lt;ArgumentNullException&gt;(false, new { message = "A message", paramName = "A parameter" });
            </code>
            </example>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
            <exception cref="T:NLib.MissingConstructorException">The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.</exception>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Boolean,System.String,System.Object)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided <paramref name="arguments"/> if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="message">The message to display if the <paramref name="condition"/> is false.</param>
            <param name="arguments">
                The argument to initialize the exception.
                The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.
            </param>
            <example>
            Example:
            <code>
            Check.Current.Requires&lt;ArgumentNullException&gt;(false, "A message", new { paramName = "A parameter" });
            </code>
            </example>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
            <exception cref="T:NLib.MissingConstructorException">The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.</exception>
        </member>
        <member name="M:NLib.CheckExtensions.Requires``1(NLib.Check,System.Func{System.Boolean},System.String,System.Object)">
            <summary>
            Specifies a check contract for the enclosing method or property, and throws an exception with the provided <paramref name="arguments"/> if the <paramref name="condition"/> for the contract fails.
            </summary>
            <typeparam name="TException">The exception to throw if the <paramref name="condition"/> is false.</typeparam>
            <param name="check">The <see cref="T:NLib.Check"/> instance that this method extends.</param>
            <param name="condition">The conditional expression to test.</param>
            <param name="message">The message to display if the <paramref name="condition"/> is false.</param>
            <param name="arguments">
                The argument to initialize the exception.
                The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.
            </param>
            <example>
            Example:
            <code>
            Check.Current.Requires&lt;ArgumentNullException&gt;(false, "A message", new { paramName = "A parameter" });
            </code>
            </example>
            <returns>The <see cref="T:NLib.Check"/> instance for method chaining.</returns>
            <exception cref="T:NLib.MissingConstructorException">The properties of the <paramref name="arguments"/> must match in name (case-sensitive), type and number of parameters.</exception>
        </member>
        <member name="T:NLib.Collections.Generic.BagBase`1">
            <summary>
            Represents a collection of objects that is maintained in Base order.
            </summary>
            <typeparam name="T">The type of elements in the bag.</typeparam>
        </member>
        <member name="T:NLib.Collections.Generic.IBag`1">
            <summary>
            Defines methods to manipulate generic bag.
            </summary>
            <typeparam name="T">The type of the elements in the bag.</typeparam>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.Add(`0,System.Int32)">
            <summary>
            Adds nCopies copies of the specified object to the Bag.
            </summary>
            <param name="item">The item to add.</param>
            <param name="numberCopies">The number of copies to add.</param>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.BagEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes one occurrence of all elements in the specified collection from the current <see cref="T:NLib.Collections.Generic.IBag`1"/> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:NLib.Collections.Generic.IBag`1"/> object.</param>
            <exception cref="T:System.ArgumentNullException">other is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.ExceptAllWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all occurrences of all elements in the specified collection from the current <see cref="T:NLib.Collections.Generic.IBag`1"/> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:NLib.Collections.Generic.IBag`1"/> object.</param>
            <exception cref="T:System.ArgumentNullException">other is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.GetCount(`0)">
            <summary>
            Gets the number of occurrences (cardinality) of the given object currently in the bag.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>the number of occurrences of the item; zero if not found.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current bag so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.IsProperSubBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag is a property (strict) sub bag of a specified collection.
            </summary>
            <returns>
            true if the current bag is a correct sub bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.IsProperSuperBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag is a correct super bag of a specified collection.
            </summary>
            <returns>
            true if the <see cref="T:NLib.Collections.Generic.IBag`1"/> object is a correct super bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.IsSubBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a bag is a sub bag of a specified collection.
            </summary>
            <returns>
            true if the current bag is a sub bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.IsSuperBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag is a super bag of a specified collection.
            </summary>
            <returns>
            true if the current bag is a super bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag overlaps with the specified collection.
            </summary>
            <returns>
            true if the current bag and <paramref name="other"/> share at least one common element; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.Remove(`0,System.Int32)">
            <summary>
            Removes a certain occurrences number of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="numberCopies">The number of copies to remove.</param>
            <returns>
            The occurrence number of <paramref name="item"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.RemoveAll(`0)">
            <summary>
            Removes all occurrences of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            The occurrence number of <paramref name="item"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current bag so that it contains only elements that are present either in the current bag or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.IBag`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current bag so that it contains all elements that are present in both the current bag and in the specified collection.
            </summary>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="P:NLib.Collections.Generic.IBag`1.UniqueSet">
            <summary>
            Gets the Set of unique elements in the Bag.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Add(`0,System.Int32)">
            <summary>
            Adds nCopies copies of the specified object to the Bag.
            </summary>
            <param name="item">The item to add.</param>
            <param name="numberCopies">The number of copies to add.</param>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection in the bag.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.BagEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array"/> is multidimensional.
                -or-
                <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                -or-
                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                -or-
                Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.ExceptAllWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all occurrences of all elements in the specified collection from the current <see cref="T:NLib.Collections.Generic.IBag`1"/> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:NLib.Collections.Generic.IBag`1"/> object.</param>
            <exception cref="T:System.ArgumentNullException">other is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes one occurrence of all elements in the specified collection from the current <see cref="T:NLib.Collections.Generic.IBag`1"/> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:NLib.Collections.Generic.IBag`1"/> object.</param>
            <exception cref="T:System.ArgumentNullException">other is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.GetCount(`0)">
            <summary>
            Gets the number of occurrences (cardinality) of the given object currently in the bag.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>the number of occurrences of the item; zero if not found.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current bag so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.IsProperSubBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag is a property (strict) sub bag of a specified collection.
            </summary>
            <returns>
            true if the current bag is a correct sub bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.IsProperSuperBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag is a correct super bag of a specified collection.
            </summary>
            <returns>
            true if the <see cref="T:NLib.Collections.Generic.IBag`1"/> object is a correct super bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.IsSubBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a bag is a sub bag of a specified collection.
            </summary>
            <returns>
            true if the current bag is a sub bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.IsSuperBagOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag is a super bag of a specified collection.
            </summary>
            <returns>
            true if the current bag is a super bag of <paramref name="other"/>; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current bag overlaps with the specified collection.
            </summary>
            <returns>
            true if the current bag and <paramref name="other"/> share at least one common element; otherwise, false.
            </returns>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.Remove(`0,System.Int32)">
            <summary>
            Removes a certain occurrences number of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="numberCopies">The number of copies to remove.</param>
            <returns>
            The occurrence number of <paramref name="item"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.RemoveAll(`0)">
            <summary>
            Removes all occurrences of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            The occurrence number of <paramref name="item"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current bag so that it contains only elements that are present either in the current bag or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.BagBase`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current bag so that it contains all elements that are present in both the current bag and in the specified collection.
            </summary>
            <param name="other">The collection to compare to the current bag.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null.</exception>
        </member>
        <member name="P:NLib.Collections.Generic.BagBase`1.Count">
            <summary>
            Gets or sets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BagBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:NLib.Collections.Generic.BagBase`1.UniqueSet">
            <summary>
            Gets the Set of unique elements in the Bag.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BagBase`1.EqualityComparer">
            <summary>
            Gets the equality comparer.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BagBase`1.Model">
            <summary>
            Gets or sets the implementation model.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.BagBaseDebugView`1">
            <summary>
            For debugging <see cref="T:NLib.Collections.Generic.BagBase`1"/>.
            </summary>
            <typeparam name="T">The type .</typeparam>
        </member>
        <member name="F:NLib.Collections.Generic.BagBaseDebugView`1.bag">
            <summary>
            The bag for debbuging.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.BagBaseDebugView`1.#ctor(NLib.Collections.Generic.BagBase{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.BagBaseDebugView`1"/> class.
            </summary>
            <param name="bag">The bag  .</param>
        </member>
        <member name="P:NLib.Collections.Generic.BagBaseDebugView`1.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.BinaryTreeNode`1">
            <summary>
            Represents a strongly typed tree node. 
            </summary>
            <typeparam name="T">The type of elements in the node.</typeparam>
        </member>
        <member name="T:NLib.Collections.Generic.IBinaryTreeNode`1">
            <summary>
            Provides the base interface for the abstraction of binary tree's nodes.
            </summary>
            <typeparam name="T">The type of elements in the node.</typeparam>
        </member>
        <member name="T:NLib.Collections.Generic.INode`1">
            <summary>
            Represents a node in a collection.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="P:NLib.Collections.Generic.INode`1.Neighbors">
            <summary>
            Gets the neighbors.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.INode`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf; has no child node.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTreeNode`1.IsRoot">
            <summary>
            Gets a value indicating whether this instance is root; has no parent node.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTreeNode`1.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTreeNode`1.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTreeNode`1.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.BinaryTreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.BinaryTreeNode`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NLib.Collections.Generic.BinaryTreeNode`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.BinaryTreeNode`1"/> class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf; has no child node.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.IsRoot">
            <summary>
            Gets a value indicating whether this instance is root; has no parent node.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.NLib#Collections#Generic#IBinaryTreeNode{T}#Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.Left">
            <summary>
            Gets or sets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.NLib#Collections#Generic#INode{T}#Neighbors">
            <summary>
            Gets the neighbors.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.NLib#Collections#Generic#IBinaryTreeNode{T}#Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.NLib#Collections#Generic#IBinaryTreeNode{T}#Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.Right">
            <summary>
            Gets or sets the right.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.BinaryTreeNode`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.ToEqualityComparer``1(NLib.EqualityComparison{``0})">
            <summary>
            Convert <see cref="T:NLib.EqualityComparison`1"/> to <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The compare type.</typeparam>
            <param name="comparison">The comparison.</param>
            <returns>The <see cref="T:System.Comparison`1"/> converted to <see cref="T:System.Collections.Generic.IComparer`1"/>.</returns>
        </member>
        <member name="T:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.EqualityComparer`1">
            <summary>
            Utility class to convert <see cref="T:System.Comparison`1"/> to <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T">The compare type.</typeparam>
        </member>
        <member name="F:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.EqualityComparer`1.comparer">
            <summary>
            The comparison to use.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.EqualityComparer`1.#ctor(NLib.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.EqualityComparer`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.EqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="x"/> to compare.</param>
            <param name="y">The second object of type <paramref name="y"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EqualityComparisonExtensions.EqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:NLib.Collections.Generic.Extensions.EnumerableExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EnumerableExtensions.Between``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Filters sequence that are between <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EnumerableExtensions.Between``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Filters sequence that are between <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EnumerableExtensions.Between``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1,``1)">
            <summary>
            Filters sequence that are between <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EnumerableExtensions.Between``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1,``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Filters sequence that are between <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> must not be null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> must not be null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.EnumerableExtensions.Paginate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Paginates the specified collection.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="page">The zero-based page number.</param>
            <param name="pageSize">Size of a page.</param>
            <returns>The subset of the collection.</returns>
        </member>
        <member name="T:NLib.Collections.Generic.Extensions.ListExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.Extensions.ListExtensions.SwapValues``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps values at <paramref name="index1"/> and <paramref name="index2"/> in the specified <paramref name="list"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="list"/></typeparam>
            <param name="list">The list to swap de the values.</param>
            <param name="index1">The index1.</param>
            <param name="index2">The index2.</param>
        </member>
        <member name="T:NLib.Collections.Generic.Extensions.Resources.IListExtensionResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Extensions.Resources.IListExtensionResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Extensions.Resources.IListExtensionResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Extensions.Resources.IListExtensionResource.SwapValues_IndexOutOfRangeException_Index1">
            <summary>
              Looks up a localized string similar to index1 is out of range..
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Extensions.Resources.IListExtensionResource.SwapValues_IndexOutOfRangeException_Index2">
            <summary>
              Looks up a localized string similar to index2 is out of range..
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.Generator">
            <summary>
            Provide a set of methods to generate collection.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.Generator.Generate``1(System.Int32,System.Func{``0,``0})">
            <summary>
            Generates a collection of <typeparamref name="T"/> with a specific number of elements.
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="count">The number of elements.</param>
            <param name="func">The function that receive the last added element and return the next element to add.</param>
            <returns>A collection of <typeparamref name="T"/> generated with a specific number of elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Generator.Generate``1(System.Int32,System.Func{``0,``0},``0)">
            <summary>
            Generates a collection of <typeparamref name="T"/> with a specific number of elements.
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="count">The number of elements.</param>
            <param name="func">The function that receive the last added element and return the next element to add.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A collection of <typeparamref name="T"/> generated with a specific number of elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Generator.Generate``1(System.Int32,System.Func{``0,``0},NLib.Collections.Generic.Generator)">
            <summary>
            Generates a collection of <typeparamref name="T"/> with a specific number of elements.
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="count">The number of elements.</param>
            <param name="func">The function that receive the last added element and return the next element to add.</param>
            <param name="provider">The provider to generate each element of the collection.</param>
            <returns>A collection of <typeparamref name="T"/> generated with a specific number of elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Generator.Generate``1(System.Int32,System.Func{``0,``0},``0,NLib.Collections.Generic.Generator)">
            <summary>
            Generates a collection of <typeparamref name="T"/> with a specific number of elements.
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="count">The number of elements.</param>
            <param name="func">The function that receive the last added element and return the next element to add.</param>
            <param name="defaultValue">The default value.</param>
            <param name="provider">The provider to generate each element of the collection.</param>
            <returns>A collection of <typeparamref name="T"/> generated with a specific number of elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.Generator.Generate``1(System.Func{``0,``0},System.Int32,``0)">
            <summary>
            Generates a collection of <typeparamref name="T"/> with a specific number of elements.
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="func">The function that receive the last added element and return the next element to add.</param>
            <param name="count">The number of elements.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A collection of <typeparamref name="T"/> generated with a specific number of elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="T:NLib.Collections.Generic.HashBag`1">
            <summary>
            Represents a collection of objects.
            </summary>
            <typeparam name="T">The type of elements in the bag.</typeparam>
        </member>
        <member name="F:NLib.Collections.Generic.HashBag`1.equalityComparer">
            <summary>
            The equality comparer.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor(NLib.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},NLib.EqualityComparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.HashBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},NLib.EqualityComparison{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.HashBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparison">The comparer. If null <paramref name="comparer"/> will be use.</param>
            <param name="comparer">The comparer. If null <paramref name="comparison"/> will be use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> and <paramref name="comparison"/> are null.</exception>
        </member>
        <member name="P:NLib.Collections.Generic.HashBag`1.UniqueSet">
            <summary>
            Gets the unique set.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.HashBag`1.EqualityComparer">
            <summary>
            Gets the equality comparer.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.IBinaryTree`1">
            <summary>
            Provides the base interface for the abstraction of binary trees.
            </summary>
            <typeparam name="T">The type of elements in the tree.</typeparam>
        </member>
        <member name="M:NLib.Collections.Generic.IBinaryTree`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection in the tree.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:NLib.Collections.Generic.IBinaryTree`1.InorderTraversal">
            <summary>
            Iterates through a collection from minimum value to maximum value.
            </summary>
            <returns>Returns the collection from minimum value to maximum value.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.IBinaryTree`1.LevelOrderTraversal">
            <summary>
            Iterates through a collection by level.
            </summary>
            <returns>Returns the collection by level.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.IBinaryTree`1.PostorderTraversal">
            <summary>
            Iterates through a collection from maximum value to minimum value.
            </summary>
            <returns>Returns the collection from maximum value to minimum value.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.IBinaryTree`1.PreorderTraversal">
            <summary>
            Iterates through a collection from root to leaves.
            </summary>
            <returns>Returns the collection from root to leaves.</returns>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTree`1.AllowDuplicates">
            <summary>
            Gets a value indicating whether allow duplicates is enabled or not.
            </summary>
            <value>
            If true, the tree will add duplicates; otherwise the duplicates won't be added.
            </value>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTree`1.RootNode">
            <summary>
            Gets the root.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTree`1.MaxValue">
            <summary>
            Gets the maximum value of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IBinaryTree`1.MinValue">
            <summary>
            Gets the minimum value of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.IRedBlackTree`1">
            <summary>
            Provides the base interface for the abstraction of red-black trees.
            </summary>
            <typeparam name="T">The type of elements in the tree.</typeparam>
        </member>
        <member name="P:NLib.Collections.Generic.IRedBlackTree`1.RootNode">
            <summary>
            Gets the root.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.RedBlackTree`1">
            <summary>
            Represents a strongly typed tree of objects. 
            Provides methods to search and manipulate the tree.
            </summary>
            <remarks>
            For more information about Red-black tree, see <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&oldid=437925585]]>.
            The null/empty leaves are not represented in this implementation. The children are null if there's any.
            </remarks>
            <typeparam name="T">The type of elements in the tree.</typeparam>
        </member>
        <member name="F:NLib.Collections.Generic.RedBlackTree`1.currentComparer">
            <summary>
            The comparison.
            </summary>
        </member>
        <member name="F:NLib.Collections.Generic.RedBlackTree`1.allowDuplicates">
            <summary>
            Indicates whether allow duplicates is enabled or not.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Comparison{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0},System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTree`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparison">The comparer. If null <paramref name="comparer"/> will be use.</param>
            <param name="comparer">The comparer. If null <paramref name="comparison"/> will be use.</param>
            <param name="allowDuplicates">If true, the tree will add duplicates; otherwise the duplicates won't be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> and <paramref name="comparison"/> are null.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection in the tree.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="array"/> is multidimensional.
                -or-
                <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                -or-
                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                -or-
                Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection in <see cref="M:NLib.Collections.Generic.RedBlackTree`1.InorderTraversal"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InorderTraversal">
            <summary>
            Iterates through a collection from minimum value to maximum value.
            </summary>
            <returns>Returns the collection from minimum value to maximum value.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.LevelOrderTraversal">
            <summary>
            Iterates through a collection by level.
            </summary>
            <returns>Returns the collection by level.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.PostorderTraversal">
            <summary>
            Iterates through a collection from maximum value to minimum value.
            </summary>
            <returns>Returns the collection from maximum value to minimum value.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.PreorderTraversal">
            <summary>
            Iterates through a collection from root to leaves.
            </summary>
            <returns>Returns the collection from root to leaves.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.Contains(`0,NLib.Collections.Generic.RedBlackTreeNode{`0}@)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <param name="nodeFound">Contains the node if found; otherwise is null.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteOneNode(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The nodes to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetGrandparent(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the grandparent.
            </summary>
            <param name="node">The node to get the grandparent.</param>
            <returns>The node's grandparent.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetMaxNode(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the maximum node of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="node">The node to start.</param>
            <returns>The maximum node.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetMinNode(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the minimum node of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="node">The node to start.</param>
            <returns>The minimum node.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetPredecessor(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the predecessor.
            </summary>
            <param name="node">The node to gets the predecessor.</param>
            <returns>The predecessor of the <paramref name="node"/>.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetSuccessor(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the successor.
            </summary>
            <param name="node">The node to gets the successor.</param>
            <returns>The successor of the <paramref name="node"/>.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetSuccessorOrPredecessor(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the successor if exists; otherwise gets the predecessor.
            Gets the predecessor if the successor is a black leaf.
            </summary>
            <param name="node">The node to gets the successor or predecessor.</param>
            <returns>The successor or the predecessor of the <paramref name="node"/>.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetSibling(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the sibling.
            </summary>
            <param name="node">The node.</param>
            <returns>The node's sibling.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.GetUncle(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Gets the uncle.
            </summary>
            <param name="node">The node.</param>
            <returns>The node's uncle.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InorderTraversal(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Iterates through a collection from minimum node to maximum node.
            </summary>
            <param name="node">The node to start the iteration.</param>
            <returns>Returns the collection from minimum node to maximum node.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.LevelOrderTraversal(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Iterates through a collection by level.
            </summary>
            <param name="node">The node to start the iteration.</param>
            <returns>Returns the collection by level.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.PostorderTraversal(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Iterates through a collection from node value to minimum node.
            </summary>
            <param name="node">The node to start the iteration.</param>
            <returns>Returns the collection from node value to node value.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.PreorderTraversal(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Iterates through a collection from root to leaves.
            </summary>
            <param name="node">The node to start the iteration.</param>
            <returns>Returns the collection from root to leaves.</returns>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.ReplaceNode(NLib.Collections.Generic.RedBlackTreeNode{`0},NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Replaces the <paramref name="oldNode"/> by the <paramref name="newNode"/>.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.RotateLeft(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Rotates the left.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.RotateRight(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Rotates the right.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.UnlinkDeletedNode(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Unlinks the deleted node from its parent and children.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteCase1(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteCase2(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            Sibling node is red. 
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteCase3(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code came from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>
            </remarks>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteCase4(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteCase5(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.DeleteCase6(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InsertCase1(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InsertCase2(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InsertCase3(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InsertCase4(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTree`1.InsertCase5(NLib.Collections.Generic.RedBlackTreeNode{`0})">
            <summary>
            See <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]> for more detail.
            </summary>
            <remarks>
            Documentation and the code come from <![CDATA[http://en.wikipedia.org/w/index.php?title=Red-black_tree&amp;oldid=437925585]]>.
            </remarks>
            <param name="node">The node to insert.</param>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.AllowDuplicates">
            <summary>
            Gets a value indicating whether allow duplicates is enabled or not.
            </summary>
            <value>
            If true, the tree will add duplicates; otherwise the duplicates won't be added.
            </value>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.Count">
            <summary>
            Gets or sets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.NLib#Collections#Generic#IBinaryTree{T}#RootNode">
            <summary>
            Gets the root.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.RootNode">
            <summary>
            Gets the root.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.MaxValue">
            <summary>
            Gets the maximum value of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.MinValue">
            <summary>
            Gets the minimum value of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.Root">
            <summary>
            Gets or sets the root.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTree`1.Comparer">
            <summary>
            Gets the comparer.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.RedBlackTreeNode`1">
            <summary>
            Represents a strongly typed tree node. 
            </summary>
            <typeparam name="T">The type of elements in the node.</typeparam>
        </member>
        <member name="T:NLib.Collections.Generic.IRedBlackTreeNode`1">
            <summary>
            Provides the base interface for the abstraction of red-black tree's nodes.
            </summary>
            <typeparam name="T">The type of elements in the node.</typeparam>
        </member>
        <member name="P:NLib.Collections.Generic.IRedBlackTreeNode`1.IsBlack">
            <summary>
            Gets a value indicating whether this instance is black.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IRedBlackTreeNode`1.IsRed">
            <summary>
            Gets a value indicating whether this instance is red.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IRedBlackTreeNode`1.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IRedBlackTreeNode`1.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.IRedBlackTreeNode`1.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTreeNode`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NLib.Collections.Generic.RedBlackTreeNode`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.RedBlackTreeNode`1"/> class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.IsLeaf">
            <summary>
            Gets a value indicating whether this instance is leaf; has no child node.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.IsBlack">
            <summary>
            Gets or sets a value indicating whether this instance is black.
            </summary>
            <value>
              <c>true</c> if this instance is black; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.IsRoot">
            <summary>
            Gets a value indicating whether this instance is root; has no parent node.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.IsRed">
            <summary>
            Gets or sets a value indicating whether this instance is red.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#IBinaryTreeNode{T}#Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#IRedBlackTreeNode{T}#Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#INode{T}#Neighbors">
            <summary>
            Gets the neighbors.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.Left">
            <summary>
            Gets or sets the left.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#IBinaryTreeNode{T}#Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#IRedBlackTreeNode{T}#Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#IBinaryTreeNode{T}#Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.NLib#Collections#Generic#IRedBlackTreeNode{T}#Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.Right">
            <summary>
            Gets or sets the right.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.RedBlackTreeNode`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.Resources.CollectionResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.CopyTo_ArgumentException_Array">
            <summary>
              Looks up a localized string similar to not enough space in array.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.CopyTo_ArgumentOutOfRangeException_ArrayIndex">
            <summary>
              Looks up a localized string similar to arrayIndex is less than 0..
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.Initialize_ArgumentNullException_ComparerAndComparison">
            <summary>
              Looks up a localized string similar to comparer and comparison are null..
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.MaxValue_CollectionEmpty">
            <summary>
              Looks up a localized string similar to The maximum value cannot be determined..
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.CollectionResource.MinValue_CollectionEmpty">
            <summary>
              Looks up a localized string similar to The minimum value cannot be determined..
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.Resources.GeneratorResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.GeneratorResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.GeneratorResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.Resources.GeneratorResource.Generate_ArgumentException_Count">
            <summary>
              Looks up a localized string similar to count must be greater or equal than zero.
            </summary>
        </member>
        <member name="T:NLib.Collections.Generic.SortedBag`1">
            <summary>
            Represents a collection of objects that is maintained in sorted order.
            </summary>
            <typeparam name="T">The type of elements in the bag.</typeparam>
        </member>
        <member name="F:NLib.Collections.Generic.SortedBag`1.currentComparer">
            <summary>
            The comparison.
            </summary>
        </member>
        <member name="F:NLib.Collections.Generic.SortedBag`1.equalityComparer">
            <summary>
            The equality comparer.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor(System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NLib.Collections.Generic.SortedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Collections.Generic.SortedBag`1"/> class.
            </summary>
            <param name="collection">The collection.</param>
            <param name="comparison">The comparer. If null <paramref name="comparer"/> will be use.</param>
            <param name="comparer">The comparer. If null <paramref name="comparison"/> will be use.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> and <paramref name="comparison"/> are null.</exception>
        </member>
        <member name="P:NLib.Collections.Generic.SortedBag`1.UniqueSet">
            <summary>
            Gets the unique set.
            </summary>
        </member>
        <member name="P:NLib.Collections.Generic.SortedBag`1.EqualityComparer">
            <summary>
            Gets the equality comparer.
            </summary>
        </member>
        <member name="T:NLib.EqualityComparison`1">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparam name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparam name="T"/> to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
            <typeparam name="T">The item type.</typeparam>
        </member>
        <member name="T:NLib.EventArgs`1">
            <summary>
            <see cref="T:NLib.EventArgs`1"/> is the base class for classes containing generic event data.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="F:NLib.EventArgs`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:NLib.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.EventArgs`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:NLib.EventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:NLib.Extensions.ComparisonExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Extensions.ComparisonExtensions.ToComparer``1(System.Comparison{``0})">
            <summary>
            Convert <see cref="T:System.Comparison`1"/> to <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T">The compare type.</typeparam>
            <param name="comparison">The comparison.</param>
            <returns>The <see cref="T:System.Comparison`1"/> converted to <see cref="T:System.Collections.Generic.IComparer`1"/>.</returns>
            <remarks>It uses <see cref="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})"/> method.</remarks>
        </member>
        <member name="T:NLib.Extensions.ConvertExtensions">
            <summary>
            Defines extensions methods for <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>.
            </summary>
        </member>
        <member name="M:NLib.Extensions.ConvertExtensions.ChangeType``1(System.Object)">
            <summary>
            Returns an <typeparamref name="T"/> with the specified <typeparamref name="T"/> and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
            <param name="value">An <see cref="T:System.Object"/> that implements the <see cref="T:System.IConvertible"/> interface.</param>
            <returns>
            An object whose <see cref="T:System.Type"/> is <typeparamref name="T"/> and whose value is equivalent to <paramref name="value"/>.
            -or-
            null, if <paramref name="value"/> is null and <typeparamref name="T"/> is not a value type.
            </returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.
            -or-
            <paramref name="value"/> is null and <typeparamref name="T"/> is a value type.
            </exception>
        </member>
        <member name="M:NLib.Extensions.ConvertExtensions.ChangeType``1(System.Object,System.IFormatProvider)">
            <summary>
            Returns an <typeparamref name="T"/> with the specified <typeparamref name="T"/> and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
            <param name="value">An <see cref="T:System.Object"/> that implements the <see cref="T:System.IConvertible"/> interface.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An object whose <see cref="T:System.Type"/> is <typeparamref name="T"/> and whose value is equivalent to <paramref name="value"/>.
            -or-
            null, if <paramref name="value"/> is null and <typeparamref name="T"/> is not a value type.
            </returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.
            -or-
            <paramref name="value"/> is null and <typeparamref name="T"/> is a value type.
            </exception>
        </member>
        <member name="T:NLib.Extensions.EventHandlerExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="M:NLib.Extensions.EventHandlerExtensions.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
            Raises the event which is represented by the event <paramref name="handler"/> specified with empty arguments, if the <paramref name="handler"/> specified isn't null.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:NLib.Extensions.EventHandlerExtensions.RaiseEvent(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the event which is represented by the <paramref name="handler"/> specified with arguments, if the <paramref name="handler"/> specified isn't null.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NLib.Extensions.EventHandlerExtensions.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event which is represented by the <paramref name="handler"/> specified with arguments, if the <paramref name="handler"/> specified isn't null.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.EventArgs"/>.</typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/>.</param>
        </member>
        <member name="T:NLib.Extensions.StringExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:NLib.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.String"/> object occurs within this string.
            </summary>
            <param name="text">The string.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>
            true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.
            </returns>
        </member>
        <member name="T:NLib.Extensions.ArrayExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Extensions.ArrayExtensions.SwapValues``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swaps values at <paramref name="index1"/> and <paramref name="index2"/> in the specified <paramref name="array"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="array"/></typeparam>
            <param name="array">The array to swap de the values.</param>
            <param name="index1">The index1.</param>
            <param name="index2">The index2.</param>
        </member>
        <member name="T:NLib.Extensions.TypeExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:NLib.Extensions.TypeExtensions.GetField(System.Type,System.String)">
            <summary>
            Gets the field.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns>The field information.</returns>
        </member>
        <member name="M:NLib.Extensions.TypeExtensions.GetProperty(System.Type,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns>The property information.</returns>
        </member>
        <member name="M:NLib.Extensions.TypeExtensions.GetMemberInfo``2(System.Type,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Searches for the public property with the specified name.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="type">The type  .</param>
            <param name="keySelector">The selector of the public property to get.</param>
            <returns>
            A <see cref="T:System.Reflection.PropertyInfo"/> object representing the public property with the specified name, if found; otherwise, null.
            </returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">More than one property is found with the specified name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="T:NLib.Linq.Extensions.ExpressionExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:NLib.Linq.Extensions.ExpressionExtensions.GetParameterName(System.Linq.Expressions.Expression)">
            <summary>
            Gets the name of the parameter.
            </summary>
            <param name="reference">The reference.</param>
            <returns>The name of the parameter.</returns>
        </member>
        <member name="T:NLib.Linq.Extensions.QueryableExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Linq.Extensions.QueryableExtensions.Between``1(System.Linq.IQueryable{``0},``0,``0)">
            <summary>
            Filters sequence that are between <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:NLib.Linq.Extensions.QueryableExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,``1)">
            <summary>
            Filters sequence that are between <paramref name="min"/> and <paramref name="max"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:NLib.Linq.Extensions.QueryableExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Paginates the specified collection.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="page">The zero-based page number.</param>
            <param name="pageSize">Size of a page.</param>
            <returns>The subset of the collection.</returns>
        </member>
        <member name="T:NLib.MathHelper">
            <summary>
            Adds some methods to <see cref="T:System.Math"/>.
            </summary>
        </member>
        <member name="M:NLib.MathHelper.Factorial(System.Double)">
            <summary>
            Get the Factorial of the the specified <paramref name="nb"/>.
            </summary>
            <param name="nb">The number.</param>
            <returns>The factorial</returns>
        </member>
        <member name="M:NLib.MathHelper.GreatCommonDivisor(System.Int64,System.Int64)">
            <summary>
            Get the Great Common Divisor (GCD)
            </summary>
            <param name="nb1">The first number.</param>
            <param name="nb2">The second number.</param>
            <returns>The Great Common Divisor</returns>
        </member>
        <member name="M:NLib.MathHelper.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Get the Least Common Multiple (LCM)
            </summary>
            <param name="nb1">The first number.</param>
            <param name="nb2">The second number.</param>
            <returns>The Least Common Multiple</returns>
        </member>
        <member name="T:NLib.MissingConstructorException">
            <summary>
            The exception that is thrown when there is an attempt to dynamically access a constructor that does not exist.
            </summary>
        </member>
        <member name="F:NLib.MissingConstructorException.className">
            <summary>
            The name of the class in which access to a nonexistent method was attempted.
            </summary>
        </member>
        <member name="M:NLib.MissingConstructorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.MissingConstructorException"/> class.
            </summary>
        </member>
        <member name="M:NLib.MissingConstructorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.MissingConstructorException"/> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:NLib.MissingConstructorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.MissingConstructorException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:NLib.MissingConstructorException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.MissingConstructorException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="className">The name of the class in which access to a nonexistent method was attempted.</param>
        </member>
        <member name="M:NLib.MissingConstructorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.MissingConstructorException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:NLib.MissingConstructorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the class name, the member name, the signature of the missing member, and additional exception information.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> object is null. </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="P:NLib.MissingConstructorException.Message">
            <summary>
            Gets the text string showing the class name, the method name, and the signature of the missing method. This property is read-only.
            </summary>
        </member>
        <member name="T:NLib.Number">
            <summary>
            Represents any number like. It can be a float, integer and rational number.
            </summary>
        </member>
        <member name="F:NLib.Number.One">
            <summary>
            Represents the number one.
            </summary>
        </member>
        <member name="F:NLib.Number.Zero">
            <summary>
            Represents the number zero.
            </summary>
        </member>
        <member name="F:NLib.Number.NaN">
            <summary>
            Represents a value that is not a number (NaN).
            </summary>
        </member>
        <member name="F:NLib.Number.PositiveInfinity">
            <summary>
            Represents the positive infinite.
            </summary>
        </member>
        <member name="F:NLib.Number.NegativeInfinity">
            <summary>
            Represents the negative infinite.
            </summary>
        </member>
        <member name="F:NLib.Number.MinValue">
            <summary>
            Represents the smallest possible value of a <see cref="T:NLib.Number"/>. This field is constant.
            </summary>
        </member>
        <member name="F:NLib.Number.MaxValue">
            <summary>
            Represents the biggest possible value of a <see cref="T:NLib.Number"/>. This field is constant.
            </summary>
        </member>
        <member name="F:NLib.Number.model">
            <summary>
            Uses as the representation of the number.
            </summary>
        </member>
        <member name="M:NLib.Number.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="l">A long value.</param>
        </member>
        <member name="M:NLib.Number.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="i">An integer value.</param>
        </member>
        <member name="M:NLib.Number.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="l">An unsigned value.</param>
        </member>
        <member name="M:NLib.Number.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
        </member>
        <member name="M:NLib.Number.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:NLib.Number.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="d">The <see cref="T:System.Decimal"/> to convert.</param>
        </member>
        <member name="M:NLib.Number.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Number"/> struct.
            </summary>
            <param name="d">The <see cref="T:System.Double"/> to convert.</param>
        </member>
        <member name="M:NLib.Number.Add(NLib.Number,NLib.Number)">
            <summary>
            Adds two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>A <see cref="T:NLib.Number"/> value that is the sum of <paramref name="r1"/> and <paramref name="r2"/>.</returns>
        </member>
        <member name="M:NLib.Number.Decrement(NLib.Number)">
            <summary>
            Decrements the <see cref="T:NLib.Number"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The value of d decremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="T:NLib.Number"/> is less than <see cref="F:System.Int64.MinValue"/></exception>
        </member>
        <member name="M:NLib.Number.Divide(NLib.Number,NLib.Number)">
            <summary>
            Divides two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>A <see cref="T:NLib.Number"/> value that is the result of dividing r1 by r2.</returns>
        </member>
        <member name="M:NLib.Number.Equals(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether two specified instances of <see cref="T:NLib.Number"/> represent the same value.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if r1 and r2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.Increment(NLib.Number)">
            <summary>
            Increments the <see cref="T:NLib.Number"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The value of d incremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="T:NLib.Number"/> is greater than <see cref="F:System.Int64.MaxValue"/></exception>
        </member>
        <member name="M:NLib.Number.IsInfinity(NLib.Number)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity
            </summary>
            <param name="r">A rational number.</param>
            <returns>true if <paramref name="r"/> evaluates to <see cref="F:NLib.Number.PositiveInfinity"/> or <see cref="F:NLib.Number.NegativeInfinity"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.IsNegativeInfinity(NLib.Number)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="r">A rational number.</param>
            <returns>
            true if <paramref name="r"/> evaluates to <see cref="F:NLib.Number.NegativeInfinity"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.Number.IsPositiveInfinity(NLib.Number)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="r">A rational number.</param>
            <returns>
            true if <paramref name="r"/> evaluates to <see cref="F:NLib.Number.PositiveInfinity"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.Number.IsNaN(NLib.Number)">
            <summary>
            Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:NLib.Number.NaN"/>).
            </summary>
            <param name="r">A rational number.</param>
            <returns>true if <paramref name="r"/> evaluates to <see cref="F:NLib.Number.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its number equivalent.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <returns>A number equivalent to the number contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
        </member>
        <member name="M:NLib.Number.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its number equivalent.
            </summary>
            <param name="s">A <see cref="T:System.String"/> containing a number to convert. </param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
            <returns>A number equivalent to the number contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
        </member>
        <member name="M:NLib.Number.TryParse(System.String,NLib.Number@)">
            <summary>
            Converts the string representation of a number to its number equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A <see cref="T:System.String"/> containing a number to convert. </param>
            <param name="result">When this method returns, contains the number value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or <see cref="F:NLib.RationalNumber.Zero"/> if the conversion failed. The conversion fails if the <paramref name="s"/> parameter is null, is not of the correct format, or represents a number less than <see cref="F:NLib.Number.MinValue"/> or greater than <see cref="F:NLib.Number.MaxValue"/>. This parameter is passed uninitialized.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.TryParse(System.String,System.IFormatProvider,NLib.Number@)">
            <summary>
            Converts the string representation of a number to its number equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A <see cref="T:System.String"/> containing a number to convert. </param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">When this method returns, contains the number value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or <see cref="F:NLib.RationalNumber.Zero"/> if the conversion failed. The conversion fails if the <paramref name="s"/> parameter is null, is not of the correct format, or represents a number less than <see cref="F:NLib.Number.MinValue"/> or greater than <see cref="F:NLib.Number.MaxValue"/>. This parameter is passed uninitialized.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.Plus(NLib.Number)">
            <summary>
            Returns the value of the <see cref="T:NLib.Number"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The value of the operand, <paramref name="r"/>.</returns>
        </member>
        <member name="M:NLib.Number.Multiply(NLib.Number,NLib.Number)">
            <summary>
            Multiplies two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/> (the multiplicand).</param>
            <param name="r2">A <see cref="T:NLib.Number"/> (the multiplier).</param>
            <returns>A <see cref="T:NLib.Number"/> that is the result of multiplying d1 and d2.</returns>
            <exception cref="T:System.OverflowException">The numerator/denominator is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/> ."</exception>
        </member>
        <member name="M:NLib.Number.Mod(NLib.Number,NLib.Number)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/> (the dividend).</param>
            <param name="r2">A <see cref="T:NLib.Number"/> (the divisor).</param>
            <returns>The <see cref="T:NLib.Number"/> remainder resulting from dividing <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.DivideByZeroException">d2 is zero</exception>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.Number.Negate(NLib.Number)">
            <summary>
            Returns the result of multiplying the specified <see cref="T:NLib.Number"/> value by negative one.
            </summary>
            <param name="r">A <see cref="T:NLib.Number"/>.</param>
            <returns>A <see cref="T:NLib.Number"/> with the value of d, but the opposite sign.  -or- Zero, if <paramref name="r"/> is zero.</returns>
        </member>
        <member name="M:NLib.Number.Subtract(NLib.Number,NLib.Number)">
            <summary>
            Subtracts one specified <see cref="T:NLib.Number"/> value from another.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/> (the minuend).</param>
            <param name="r2">A <see cref="T:NLib.Number"/> (the subtrahend).</param>
            <returns>The <see cref="T:NLib.Number"/> result of subtracting d2 from d1.</returns>
            <exception cref="T:System.OverflowException">The numerator/denominator is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/> ."</exception>
        </member>
        <member name="M:NLib.Number.op_Implicit(System.Decimal)~NLib.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NLib.Number"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.Number.op_Implicit(System.Double)~NLib.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NLib.Number"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.Number.op_Implicit(System.Int64)~NLib.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:NLib.Number"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.Number.op_Implicit(System.Int32)~NLib.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:NLib.Number"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.Number.op_Explicit(System.UInt64)~NLib.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:NLib.Number"/>.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.Number.op_Implicit(System.String)~NLib.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:NLib.Number"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.Number.op_Subtraction(NLib.Number,NLib.Number)">
            <summary>
            Subtracts two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLib.Number.op_UnaryNegation(NLib.Number)">
            <summary>
            Negates the value of the specified <see cref="T:NLib.Number"/> operand.
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLib.Number.op_Decrement(NLib.Number)">
            <summary>
            Decrements the <see cref="T:NLib.Number"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The value of d decremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="T:NLib.Number"/> is less than <see cref="F:System.Int64.MinValue"/></exception>
        </member>
        <member name="M:NLib.Number.op_Inequality(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:NLib.Number"/> are not equal.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if <paramref name="r1"/> and <paramref name="r2"/> are not equal; otherwise, false..</returns>
        </member>
        <member name="M:NLib.Number.op_Modulus(NLib.Number,NLib.Number)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/> (the dividend).</param>
            <param name="r2">A <see cref="T:NLib.Number"/> (the divisor).</param>
            <returns>The <see cref="T:NLib.Number"/> remainder resulting from dividing <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.DivideByZeroException">d2 is zero</exception>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.Number.op_Multiply(NLib.Number,NLib.Number)">
            <summary>
            Multiplies two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>The <see cref="T:NLib.Number"/> result of multiplying <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.Number.op_Division(NLib.Number,NLib.Number)">
            <summary>
            Divides two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/> (the dividend).</param>
            <param name="r2">A <see cref="T:NLib.Number"/> (the divisor).</param>
            <returns>The <see cref="T:NLib.Number"/> result of <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.DivideByZeroException">d2 is zero</exception>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.Number.op_Addition(NLib.Number,NLib.Number)">
            <summary>
            Adds two specified <see cref="T:NLib.Number"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>The <see cref="T:NLib.Number"/> result of <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.Number.op_UnaryPlus(NLib.Number)">
            <summary>
            Returns the value of the <see cref="T:NLib.Number"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The value of the operand, <paramref name="r"/>.</returns>
        </member>
        <member name="M:NLib.Number.op_Increment(NLib.Number)">
            <summary>
            Increments the <see cref="T:NLib.Number"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.Number"/> operand.</param>
            <returns>The value of d incremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="T:NLib.Number"/> is greater than <see cref="F:System.Int64.MaxValue"/></exception>
        </member>
        <member name="M:NLib.Number.op_LessThan(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NLib.Number"/> is less than another specified <see cref="T:NLib.Number"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if <paramref name="r1"/> is less than <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.op_LessThanOrEqual(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NLib.Number"/> is less than or equal to another specified <see cref="T:NLib.Number"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if <paramref name="r1"/> is less than or to equal <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.op_Equality(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:NLib.Number"/> are equal.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if <paramref name="r1"/> is less than or to equal <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.op_GreaterThan(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NLib.Number"/> is greater than another specified <see cref="T:NLib.Number"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if <paramref name="r1"/> is greater than <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.op_GreaterThanOrEqual(NLib.Number,NLib.Number)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:NLib.Number"/> is greater than or equal to another specified <see cref="T:NLib.Number"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.Number"/>.</param>
            <param name="r2">A <see cref="T:NLib.Number"/>.</param>
            <returns>true if <paramref name="r1"/> is greater than or to equal <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.Number.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:NLib.Number.CompareTo(NLib.Number)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="other"/>. Zero This instance is equal to <paramref name="other"/>. Greater than zero This instance is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:NLib.Number.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLib.Number.Equals(NLib.Number)">
            <summary>
            Determines whether the specified <see cref="T:NLib.Number"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:NLib.Number"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:NLib.Number"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLib.Number.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLib.Number.Negate">
            <summary>
            Negates this instance.
            </summary>
            <returns>A new negative <see cref="T:NLib.Number"/></returns>
        </member>
        <member name="M:NLib.Number.ToDecimal">
            <summary>
            Convert to <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The <see cref="T:System.Decimal"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.Number.ToDouble">
            <summary>
            Convert to <see cref="T:System.Double"/>.
            </summary>
            <returns>The <see cref="T:System.Double"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.Number.ToInt64">
            <summary>
            Convert to <see cref="T:System.Int64"/>.
            </summary>
            <returns>The <see cref="T:System.Int64"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.Number.ToSingle">
            <summary>
            Convert to <see cref="T:System.Single"/>.
            </summary>
            <returns>The <see cref="T:System.Single"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.Number.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent <see cref="T:System.String"/> representation, using the specified format.
            </summary>
            <returns>The <see cref="T:System.String"/> representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:NLib.Number.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent <see cref="T:System.String"/> representation, using the specified format.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>The <see cref="T:System.String"/> representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:NLib.Number.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent <see cref="T:System.String"/> representation, using the specified format.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <returns>The <see cref="T:System.String"/> representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:NLib.Number.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent <see cref="T:System.String"/> representation, using the specified format.
            </summary>
            <param name="format">A standard or custom numeric format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>The <see cref="T:System.String"/> representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="provider">The provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.Number.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="T:NLib.Patterns.ICommand">
            <summary>
            Represents the command pattern.
            </summary>
        </member>
        <member name="M:NLib.Patterns.ICommand.Execute">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="M:NLib.Patterns.ICommand.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="M:NLib.Patterns.ICommand.Redo">
            <summary>
            Redoes the action.
            </summary>
        </member>
        <member name="T:NLib.Patterns.LazySingleton`1">
            <summary>
            Create a unique instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to create a unique instance</typeparam>
        </member>
        <member name="F:NLib.Patterns.LazySingleton`1.Instance">
            <summary>
            Unique instance.
            </summary>
        </member>
        <member name="P:NLib.Patterns.LazySingleton`1.Current">
            <summary>
            Gets the current instance of <typeparam name="T"/>.
            </summary>
        </member>
        <member name="T:NLib.Patterns.Resources.SimpleCommandResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Patterns.Resources.SimpleCommandResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Patterns.Resources.SimpleCommandResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Patterns.Resources.SimpleCommandResource.Redo_InvalidOperationException">
            <summary>
              Looks up a localized string similar to No more redo.
            </summary>
        </member>
        <member name="P:NLib.Patterns.Resources.SimpleCommandResource.Undo_InvalidOperationException">
            <summary>
              Looks up a localized string similar to No more undo.
            </summary>
        </member>
        <member name="T:NLib.Patterns.StackCommand">
            <summary>
            Stack command pattern to do Undo/Redo.
            </summary>
        </member>
        <member name="F:NLib.Patterns.StackCommand.undoStack">
            <summary>
            the undo stack.
            </summary>
        </member>
        <member name="F:NLib.Patterns.StackCommand.redoStack">
            <summary>
            the redo stack.
            </summary>
        </member>
        <member name="F:NLib.Patterns.StackCommand.execute">
            <summary>
            Execute the command.
            </summary>
        </member>
        <member name="F:NLib.Patterns.StackCommand.undo">
            <summary>
            Undo the command.
            </summary>
        </member>
        <member name="F:NLib.Patterns.StackCommand.redo">
            <summary>
            Redo the command
            </summary>
        </member>
        <member name="M:NLib.Patterns.StackCommand.#ctor(System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Patterns.StackCommand"/> class.
            </summary>
            <param name="execute">The execute command.</param>
            <param name="undo">The undo command.</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
            /// <exception cref="T:System.ArgumentNullException">undo is null.</exception>
        </member>
        <member name="M:NLib.Patterns.StackCommand.#ctor(System.Action,System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Patterns.StackCommand"/> class.
            </summary>
            <param name="execute">The execute command.</param>
            <param name="undo">The undo command.</param>
            <param name="redo">The redo command. If it's null, the <paramref name="execute"/> will also be the <paramref name="redo"/> command</param>
            <exception cref="T:System.ArgumentNullException">execute is null.</exception>
            <exception cref="T:System.ArgumentNullException">undo is null.</exception>
        </member>
        <member name="M:NLib.Patterns.StackCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Patterns.StackCommand"/> class.
            </summary>
        </member>
        <member name="M:NLib.Patterns.StackCommand.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:NLib.Patterns.StackCommand.Execute">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="M:NLib.Patterns.StackCommand.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="M:NLib.Patterns.StackCommand.Redo">
            <summary>
            Redoes the action.
            </summary>
        </member>
        <member name="P:NLib.Patterns.StackCommand.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLib.Patterns.StackCommand.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLib.Patterns.StackCommand.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
            <value>The undo stack.</value>
        </member>
        <member name="P:NLib.Patterns.StackCommand.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
            <value>The redo stack.</value>
        </member>
        <member name="T:NLib.RationalNumber">
            <summary>
            Class allowing management of fraction.
            The following operators are defined: +, -, *, /, ==, !=, etc. 
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.One">
            <summary>
            Represents the number one (1 / 1).
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.Zero">
            <summary>
            Represents the number zero (0 / 1).
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.NaN">
            <summary>
            Represents a value that is not a number (NaN) (0 / 0).
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.PositiveInfinity">
            <summary>
            Represents the positive infinite.
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.NegativeInfinity">
            <summary>
            Represents the negative infinite.
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.MinValue">
            <summary>
            Represents the smallest possible value of a <see cref="T:NLib.RationalNumber"/>. This field is constant.
            </summary>
        </member>
        <member name="F:NLib.RationalNumber.MaxValue">
            <summary>
            Represents the biggest possible value of a <see cref="T:NLib.RationalNumber"/>. This field is constant.
            </summary>
        </member>
        <member name="M:NLib.RationalNumber.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.RationalNumber"/> struct.
            </summary>
            <param name="numerator">The numerator.</param>
        </member>
        <member name="M:NLib.RationalNumber.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.RationalNumber"/> struct.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <exception cref="T:System.DivideByZeroException">The denominator must be non-zero.</exception>
        </member>
        <member name="M:NLib.RationalNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.RationalNumber"/> struct.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <example>
            Example 1
            <code>
            var r = new RationalNumber("1");
            </code>
            Example 2
            <code>
            var r = new RationalNumber("1 / 2");
            var r2 = new RationalNumber("1/2");
            </code>
            Example 3
            <code>
            var r = new RationalNumber("1 / 1 / 2");
            var r2 = new RationalNumber("1/1/2");
            </code>
            </example>
        </member>
        <member name="M:NLib.RationalNumber.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.RationalNumber"/> struct.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <example>
            Example 1
            <code>
            var r = new RationalNumber("1", CultureInfo.CurrentCulture);
            </code>
            Example 2
            <code>
            var r = new RationalNumber("1 / 2", CultureInfo.CurrentCulture);
            var r2 = new RationalNumber("1/2", CultureInfo.CurrentCulture);
            </code>
            Example 3
            <code>
            var r = new RationalNumber("1 / 1 / 2", CultureInfo.CurrentCulture);
            var r2 = new RationalNumber("1/1/2", CultureInfo.CurrentCulture);
            </code>
            </example>
        </member>
        <member name="M:NLib.RationalNumber.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.RationalNumber"/> struct.
            </summary>
            <param name="d">The <see cref="T:System.Decimal"/> to convert.</param>
        </member>
        <member name="M:NLib.RationalNumber.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.RationalNumber"/> struct.
            </summary>
            <param name="d">The <see cref="T:System.Double"/> to convert.</param>
        </member>
        <member name="M:NLib.RationalNumber.Add(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Adds two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>A <see cref="T:NLib.RationalNumber"/> value that is the sum of <paramref name="r1"/> and <paramref name="r2"/>.</returns>
        </member>
        <member name="M:NLib.RationalNumber.Decrement(NLib.RationalNumber)">
            <summary>
            Decrements the <see cref="P:NLib.RationalNumber.Numerator"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The value of d decremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="P:NLib.RationalNumber.Numerator"/> is less than <see cref="F:System.Int64.MinValue"/></exception>
        </member>
        <member name="M:NLib.RationalNumber.Divide(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Divides two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>A <see cref="T:NLib.RationalNumber"/> value that is the result of dividing r1 by r2.</returns>
        </member>
        <member name="M:NLib.RationalNumber.Equals(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether two specified instances of <see cref="T:NLib.RationalNumber"/> represent the same value.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if r1 and r2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.Increment(NLib.RationalNumber)">
            <summary>
            Increments the <see cref="P:NLib.RationalNumber.Numerator"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The value of d incremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="P:NLib.RationalNumber.Numerator"/> is greater than <see cref="F:System.Int64.MaxValue"/></exception>
        </member>
        <member name="M:NLib.RationalNumber.IsInfinity(NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity
            </summary>
            <param name="r">A rational number.</param>
            <returns>true if <paramref name="r"/> evaluates to <see cref="F:NLib.RationalNumber.PositiveInfinity"/> or <see cref="F:NLib.RationalNumber.NegativeInfinity"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.IsNegativeInfinity(NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="r">A rational number.</param>
            <returns>
            true if <paramref name="r"/> evaluates to <see cref="F:NLib.RationalNumber.NegativeInfinity"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.IsPositiveInfinity(NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="r">A rational number.</param>
            <returns>
            true if <paramref name="r"/> evaluates to <see cref="F:NLib.RationalNumber.PositiveInfinity"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.IsNaN(NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:NLib.RationalNumber.NaN"/>).
            </summary>
            <param name="r">A rational number.</param>
            <returns>true if <paramref name="r"/> evaluates to <see cref="F:NLib.RationalNumber.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its rational number equivalent.
            </summary>
            <param name="s">A string containing a rational number to convert. </param>
            <returns>A rational number equivalent to the number contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
        </member>
        <member name="M:NLib.RationalNumber.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its rational number equivalent.
            </summary>
            <param name="s">A <see cref="T:System.String"/> containing a rational number to convert. </param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
            <returns>A rational number equivalent to the number contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
        </member>
        <member name="M:NLib.RationalNumber.Plus(NLib.RationalNumber)">
            <summary>
            Returns the value of the <see cref="T:NLib.RationalNumber"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The value of the operand, <paramref name="r"/>.</returns>
        </member>
        <member name="M:NLib.RationalNumber.Multiply(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Multiplies two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/> (the multiplicand).</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/> (the multiplier).</param>
            <returns>A <see cref="T:NLib.RationalNumber"/> that is the result of multiplying d1 and d2.</returns>
            <exception cref="T:System.OverflowException">The numerator/denominator is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/> ."</exception>
        </member>
        <member name="M:NLib.RationalNumber.Mod(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/> (the dividend).</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/> (the divisor).</param>
            <returns>The <see cref="T:NLib.RationalNumber"/> remainder resulting from dividing <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.DivideByZeroException">d2 is zero</exception>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.RationalNumber.Negate(NLib.RationalNumber)">
            <summary>
            Returns the result of multiplying the specified <see cref="T:NLib.RationalNumber"/> value by negative one.
            </summary>
            <param name="r">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>A <see cref="T:NLib.RationalNumber"/> with the value of d, but the opposite sign.  -or- Zero, if <paramref name="r"/> is zero.</returns>
        </member>
        <member name="M:NLib.RationalNumber.Reverse(NLib.RationalNumber)">
            <summary>
            Reverses the numerator with the denominator.
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> to reverse.</param>
            <returns>A new <see cref="T:NLib.RationalNumber"/>.</returns>
            <exception cref="T:System.DivideByZeroException">The numerator must not be zero.</exception>
        </member>
        <member name="M:NLib.RationalNumber.Subtract(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Subtracts one specified <see cref="T:NLib.RationalNumber"/> value from another.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/> (the minuend).</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/> (the subtrahend).</param>
            <returns>The <see cref="T:NLib.RationalNumber"/> result of subtracting d2 from d1.</returns>
            <exception cref="T:System.OverflowException">The numerator/denominator is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/> ."</exception>
        </member>
        <member name="M:NLib.RationalNumber.TryParse(System.String,NLib.RationalNumber@)">
            <summary>
            Converts the string representation of a number to its rational number equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A <see cref="T:System.String"/> containing a number to convert. </param>
            <param name="result">When this method returns, contains the rational number value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or <see cref="F:NLib.RationalNumber.Zero"/> if the conversion failed. The conversion fails if the <paramref name="s"/> parameter is null, is not of the correct format, or represents a number less than <see cref="F:NLib.RationalNumber.MinValue"/> or greater than <see cref="F:NLib.RationalNumber.MaxValue"/>. This parameter is passed uninitialized.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.TryParse(System.String,System.IFormatProvider,NLib.RationalNumber@)">
            <summary>
            Converts the string representation of a number to its rational number equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A <see cref="T:System.String"/> containing a number to convert. </param>
            <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
            <param name="result">When this method returns, contains the rational number value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or <see cref="F:NLib.RationalNumber.Zero"/> if the conversion failed. The conversion fails if the <paramref name="s"/> parameter is null, is not of the correct format, or represents a number less than <see cref="F:NLib.RationalNumber.MinValue"/> or greater than <see cref="F:NLib.RationalNumber.MaxValue"/>. This parameter is passed uninitialized.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Implicit(System.Decimal)~NLib.RationalNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:NLib.RationalNumber"/>.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Implicit(System.Double)~NLib.RationalNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NLib.RationalNumber"/>.
            </summary>
            <param name="value">The <see cref="T:System.Double"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Implicit(System.Int64)~NLib.RationalNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:NLib.RationalNumber"/>.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Implicit(System.String)~NLib.RationalNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:NLib.RationalNumber"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/>.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Subtraction(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Subtracts two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_UnaryNegation(NLib.RationalNumber)">
            <summary>
            Negates the value of the specified <see cref="T:NLib.RationalNumber"/> operand.
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Decrement(NLib.RationalNumber)">
            <summary>
            Decrements the <see cref="P:NLib.RationalNumber.Numerator"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The value of d decremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="P:NLib.RationalNumber.Numerator"/> is less than <see cref="F:System.Int64.MinValue"/></exception>
        </member>
        <member name="M:NLib.RationalNumber.op_Inequality(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:NLib.RationalNumber"/> are not equal.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if <paramref name="r1"/> and <paramref name="r2"/> are not equal; otherwise, false..</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Modulus(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/> (the dividend).</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/> (the divisor).</param>
            <returns>The <see cref="T:NLib.RationalNumber"/> remainder resulting from dividing <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.DivideByZeroException">d2 is zero</exception>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.RationalNumber.op_Multiply(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Multiplies two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>The <see cref="T:NLib.RationalNumber"/> result of multiplying <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.RationalNumber.op_Division(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Divides two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/> (the dividend).</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/> (the divisor).</param>
            <returns>The <see cref="T:NLib.RationalNumber"/> result of <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.DivideByZeroException">d2 is zero</exception>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.RationalNumber.op_Addition(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Adds two specified <see cref="T:NLib.RationalNumber"/> values.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>The <see cref="T:NLib.RationalNumber"/> result of <paramref name="r1"/> by <paramref name="r2"/>.</returns>
            <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>.</exception>
        </member>
        <member name="M:NLib.RationalNumber.op_UnaryPlus(NLib.RationalNumber)">
            <summary>
            Returns the value of the <see cref="T:NLib.RationalNumber"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The value of the operand, <paramref name="r"/>.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Increment(NLib.RationalNumber)">
            <summary>
            Increments the <see cref="P:NLib.RationalNumber.Numerator"/> operand by one.
            </summary>
            <param name="r">The <see cref="T:NLib.RationalNumber"/> operand.</param>
            <returns>The value of d incremented by 1.</returns>
            <exception cref="T:System.OverflowException">The <see cref="P:NLib.RationalNumber.Numerator"/> is greater than <see cref="F:System.Int64.MaxValue"/></exception>
        </member>
        <member name="M:NLib.RationalNumber.op_LessThan(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="P:NLib.RationalNumber.Numerator"/> is less than another specified <see cref="P:NLib.RationalNumber.Numerator"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if <paramref name="r1"/> is less than <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_LessThanOrEqual(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="P:NLib.RationalNumber.Numerator"/> is less than or equal to another specified <see cref="P:NLib.RationalNumber.Numerator"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if <paramref name="r1"/> is less than or to equal <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_Equality(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether two instances of <see cref="P:NLib.RationalNumber.Numerator"/> are equal.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if <paramref name="r1"/> is less than or to equal <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_GreaterThan(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="P:NLib.RationalNumber.Numerator"/> is greater than another specified <see cref="P:NLib.RationalNumber.Numerator"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if <paramref name="r1"/> is greater than <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.op_GreaterThanOrEqual(NLib.RationalNumber,NLib.RationalNumber)">
            <summary>
            Returns a value indicating whether a specified <see cref="P:NLib.RationalNumber.Numerator"/> is greater than or equal to another specified <see cref="P:NLib.RationalNumber.Numerator"/>.
            </summary>
            <param name="r1">A <see cref="T:NLib.RationalNumber"/>.</param>
            <param name="r2">A <see cref="T:NLib.RationalNumber"/>.</param>
            <returns>true if <paramref name="r1"/> is greater than or to equal <paramref name="r2"/>; otherwise, false.</returns>
        </member>
        <member name="M:NLib.RationalNumber.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:NLib.RationalNumber.CompareTo(NLib.RationalNumber)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="other"/>. Zero This instance is equal to <paramref name="other"/>. Greater than zero This instance is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.Equals(NLib.RationalNumber)">
            <summary>
            Determines whether the specified <see cref="T:NLib.RationalNumber"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:NLib.RationalNumber"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:NLib.RationalNumber"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NLib.RationalNumber.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.Negate">
            <summary>
            Negates this instance.
            </summary>
            <returns>A new negative <see cref="T:NLib.RationalNumber"/></returns>
        </member>
        <member name="M:NLib.RationalNumber.Reverse">
            <summary>
            Reverses the numerator with the denominator.
            </summary>
            <returns>A new <see cref="T:NLib.RationalNumber"/>.</returns>
            <exception cref="T:System.DivideByZeroException">The numerator must not be zero.</exception>
        </member>
        <member name="M:NLib.RationalNumber.ToDecimal">
            <summary>
            Convert to <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The <see cref="T:System.Decimal"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.RationalNumber.ToDouble">
            <summary>
            Convert to <see cref="T:System.Double"/>.
            </summary>
            <returns>The <see cref="T:System.Double"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.RationalNumber.ToInt64">
            <summary>
            Convert to <see cref="T:System.Int64"/>.
            </summary>
            <returns>The <see cref="T:System.Int64"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.RationalNumber.ToSingle">
            <summary>
            Convert to <see cref="T:System.Single"/>.
            </summary>
            <returns>The <see cref="T:System.Single"/> value of the current instance.</returns>
        </member>
        <member name="M:NLib.RationalNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="longForm">if set to <c>true</c> se representative is in 3 parts {0} / {1} / {2}; otherwise is in two parts {0} / {1}.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.ToString(System.Boolean,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="longForm">if set to <c>true</c> se representative is in 3 parts {0} / {1} / {2}; otherwise is in two parts {0} / {1}.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion is not supported.</exception>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion is not supported.</exception>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="provider">The provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:NLib.RationalNumber.Initialize(System.Int64,System.Int64)">
            <summary>
            Initializes the specified numerator and denominator.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <exception cref="T:System.DivideByZeroException">The denominator must be non-zero.</exception>
        </member>
        <member name="M:NLib.RationalNumber.Initialize(System.Double)">
            <summary>
            Initializes the rational number.
            </summary>
            <param name="d">The number.</param>
            <exception cref="T:System.ArgumentException">The number must not be NaN.</exception>
            <exception cref="T:System.ArgumentException">The number must not be Infinite.</exception>
        </member>
        <member name="M:NLib.RationalNumber.Reduce">
            <summary>
            Reduces the rational number.
            </summary>
        </member>
        <member name="P:NLib.RationalNumber.Numerator">
            <summary>
            Gets the numerator.
            </summary>
        </member>
        <member name="P:NLib.RationalNumber.Denominator">
            <summary>
            Gets the denominator.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Extensions.PropertyHelperExtensions">
            <summary>
            Defines extensions methods for <see cref="T:NLib.Reflection.PropertyHelper`2"/>.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Extensions.PropertyHelperExtensions.SetValue``2(NLib.Reflection.PropertyHelper{``0,``1},``1,System.Object[])">
            <summary>
            Sets the value of the property with optional index values for index properties.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="TKey">The type of the property.</typeparam>
            <param name="helper">The helper.</param>
            <param name="value">The value.</param>
            <param name="index">The index.</param>
            <returns>The reflection helper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.PropertyHelperExtensions.GetValue``2(NLib.Reflection.PropertyHelper{``0,``1},System.Object[])">
            <summary>
            Gets the value of the property with optional index values for indexed properties.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="TKey">The type of the property.</typeparam>
            <param name="helper">The helper.</param>
            <param name="index">The index.</param>
            <returns>The value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
        </member>
        <member name="T:NLib.Reflection.Extensions.FieldHelperExtensions">
            <summary>
            Defines extensions methods for <see cref="T:NLib.Reflection.FieldHelper`2"/>.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Extensions.FieldHelperExtensions.SetValue``2(NLib.Reflection.FieldHelper{``0,``1},``1)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="TKey">The type of the field.</typeparam>
            <param name="helper">The helper.</param>
            <param name="value">The value.</param>
            <returns>The reflection helper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.FieldHelperExtensions.GetValue``2(NLib.Reflection.FieldHelper{``0,``1})">
            <summary>
            Gets the value of a field supported by a given object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="TKey">The type of the field.</typeparam>
            <param name="helper">The helper.</param>
            <returns>The value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
        </member>
        <member name="T:NLib.Reflection.Extensions.ReflectionHelperExtensions">
            <summary>
            Defines extensions methods for <see cref="T:NLib.Reflection.ReflectionHelper`1"/>.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Extensions.ReflectionHelperExtensions.Field``1(NLib.Reflection.ReflectionHelper{``0},System.String)">
            <summary>
            Get the field by name.
            </summary>
            <typeparam name="T">The Type of the object.</typeparam>
            <param name="helper">The helper.</param>
            <param name="name">The name of the field.</param>
            <returns>The field helper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.MissingFieldException">The field cannot be found.</exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.ReflectionHelperExtensions.Field``2(NLib.Reflection.ReflectionHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the field by selector.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="TKey">The type of the field.</typeparam>
            <param name="helper">The helper.</param>
            <param name="keySelector">The key selector.</param>
            <returns>The field helper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.FieldAccessException">The field cannot be found or is not a <see cref="T:System.Reflection.FieldInfo"/>.</exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.ReflectionHelperExtensions.Property``1(NLib.Reflection.ReflectionHelper{``0},System.String)">
            <summary>
            Get the property by name.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="helper">The helper.</param>
            <param name="name">The name of the property.</param>
            <returns>The property helper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.MissingMemberException">The property cannot be found.</exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.ReflectionHelperExtensions.Property``2(NLib.Reflection.ReflectionHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the property by selector.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="TKey">The type of the property.</typeparam>
            <param name="helper">The helper.</param>
            <param name="keySelector">The key selector.</param>
            <returns>The property helper.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="helper"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
            <exception cref="T:System.FieldAccessException">The property cannot be found or is not a <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.ReflectionHelperExtensions.Reflection``1(``0)">
            <summary>
            Gets the Fluent reflection.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="value">The value.</param>
            <returns>The reflection helper.</returns>
        </member>
        <member name="M:NLib.Reflection.Extensions.ReflectionHelperExtensions.Return``1(NLib.Reflection.ReflectionHelper{``0})">
            <summary>
            Returns the specified object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="helper">The helper.</param>
            <returns>The object.</returns>
        </member>
        <member name="T:NLib.Reflection.FieldHelper`2">
            <summary>
            Represents support for property reflection.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <typeparam name="TKey">The field's type.</typeparam>
        </member>
        <member name="F:NLib.Reflection.FieldHelper`2.reflectionHelper">
            <summary>
            The reflection helper.
            </summary>
        </member>
        <member name="F:NLib.Reflection.FieldHelper`2.fieldInfo">
            <summary>
            The field.
            </summary>
        </member>
        <member name="F:NLib.Reflection.FieldHelper`2.fieldInfoType">
            <summary>
            The field's type
            </summary>
        </member>
        <member name="M:NLib.Reflection.FieldHelper`2.#ctor(NLib.Reflection.ReflectionHelper{`0},System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Reflection.FieldHelper`2"/> class.
            </summary>
            <param name="reflectionHelper">The reflection helper.</param>
            <param name="fieldInfo">The field info.</param>
        </member>
        <member name="P:NLib.Reflection.FieldHelper`2.ReflectionHelper">
            <summary>
            Gets the reflection helper.
            </summary>
        </member>
        <member name="P:NLib.Reflection.FieldHelper`2.FieldInfo">
            <summary>
            Gets the field info.
            </summary>
        </member>
        <member name="P:NLib.Reflection.FieldHelper`2.FieldInfoType">
            <summary>
            Gets the type of the field info.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Extensions.AssemblyExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Extensions.AssemblyExtensions.GetManifestResourceString(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from this assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>A <see cref="T:System.String"/> representing the manifest resource; otherwise null if not found;</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assembly"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="name"/> parameter is an empty string ("").</exception>
            <exception cref="T:System.IO.FileLoadException">A file that was found could not be loaded.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="name"/> was not found.</exception>
            <exception cref="T:System.BadImageFormatException"><paramref name="name"/> is not a valid assembly.</exception>
        </member>
        <member name="T:NLib.Reflection.Extensions.MemberInfoExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:NLib.Reflection.Extensions.MemberInfoExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            When overridden in a derived class, returns the first of custom attributes identified by <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">
            The type of attribute to search for. 
            Only attributes that are assignable to this type are returned.
            </typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>The first attribute or null.</returns>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
            <exception cref="T:System.ArgumentNullException">The member info is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            This member belongs to a type that is loaded into the reflection-only context. 
            See How to: Load Assemblies into the Reflection-Only Context.
            </exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.MemberInfoExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            When overridden in a derived class, returns an array of custom attributes identified by <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">
            The type of attribute to search for. 
            Only attributes that are assignable to this type are returned.
            </typeparam>
            <param name="memberInfo">The member info.</param>
            <param name="inherit">Specifies whether to search this member's inheritance chain to find the attributes.</param>
            <returns>An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</returns>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
            <exception cref="T:System.ArgumentNullException">The member info is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            This member belongs to a type that is loaded into the reflection-only context. 
            See How to: Load Assemblies into the Reflection-Only Context.
            </exception>
        </member>
        <member name="M:NLib.Reflection.Extensions.MemberInfoExtensions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of the member info.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The type of the member info.</returns>
        </member>
        <member name="T:NLib.Reflection.PropertyHelper`2">
            <summary>
            Represents support for property reflection.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <typeparam name="TKey">The property's type.</typeparam>
        </member>
        <member name="F:NLib.Reflection.PropertyHelper`2.reflectionHelper">
            <summary>
            The reflection helper.
            </summary>
        </member>
        <member name="F:NLib.Reflection.PropertyHelper`2.propertyInfo">
            <summary>
            The property info.
            </summary>
        </member>
        <member name="F:NLib.Reflection.PropertyHelper`2.propertyInfoType">
            <summary>
            The property's type.
            </summary>
        </member>
        <member name="M:NLib.Reflection.PropertyHelper`2.#ctor(NLib.Reflection.ReflectionHelper{`0},System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Reflection.PropertyHelper`2"/> class.
            </summary>
            <param name="reflectionHelper">The reflection helper.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="P:NLib.Reflection.PropertyHelper`2.ReflectionHelper">
            <summary>
            Gets the reflection helper.
            </summary>
        </member>
        <member name="P:NLib.Reflection.PropertyHelper`2.PropertyInfo">
            <summary>
            Gets the property info.
            </summary>
        </member>
        <member name="P:NLib.Reflection.PropertyHelper`2.PropertyInfoType">
            <summary>
            Gets the type of the property info.
            </summary>
        </member>
        <member name="T:NLib.Reflection.ReflectionHelper`1">
            <summary>
            Represents support for reflection.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
        </member>
        <member name="F:NLib.Reflection.ReflectionHelper`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:NLib.Reflection.ReflectionHelper`1.type">
            <summary>
            The type of the value.
            </summary>
        </member>
        <member name="M:NLib.Reflection.ReflectionHelper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NLib.Reflection.ReflectionHelper`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NLib.Reflection.ReflectionHelper`1.GetField(System.String)">
            <summary>
            Gets the field by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The field if exists; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="M:NLib.Reflection.ReflectionHelper`1.GetProperty(System.String)">
            <summary>
            Gets the property by name.
            </summary>
            <param name="name">The name.</param>
            <returns>The property if exists; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
        </member>
        <member name="M:NLib.Reflection.ReflectionHelper`1.GetMemberInfo``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the member by selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The key selector.</param>
            <returns>The member if exists; otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="P:NLib.Reflection.ReflectionHelper`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:NLib.Reflection.ReflectionHelper`1.Type">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="T:NLib.Reflection.Resources.ReflectionResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Resources.ReflectionResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Resources.ReflectionResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Reflection.Resources.ReflectionResource.IsNotFieldInfo">
            <summary>
              Looks up a localized string similar to The {0} is not a FieldInfo or the field does not exists..
            </summary>
        </member>
        <member name="P:NLib.Reflection.Resources.ReflectionResource.IsNotPropertyInfo">
            <summary>
              Looks up a localized string similar to The {0} is not a PropertyInfo or the property does not exists..
            </summary>
        </member>
        <member name="T:NLib.Resources.MathHelperResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Resources.MathHelperResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Resources.MathHelperResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Resources.MathHelperResource.Factorial_ArgumentException_Nb">
            <summary>
              Looks up a localized string similar to nb must be positive.
            </summary>
        </member>
        <member name="T:NLib.Resources.NumberResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Resources.NumberResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Resources.NumberResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Resources.NumberResource.CompareTo_InvalidCastException_Obj">
            <summary>
              Looks up a localized string similar to The obj must be a Number or can be implicit converted to Number.
            </summary>
        </member>
        <member name="T:NLib.Resources.RationalNumberResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.CompareTo_InvalidCastException_Obj">
            <summary>
              Looks up a localized string similar to The obj must be a RationalNumber or can be implicit converted to RationalNumber.
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.Initialize_DivideByZeroException_Denominator">
            <summary>
              Looks up a localized string similar to The denominator must be non-zero..
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.RationalNumber_ArgumentException_S">
            <summary>
              Looks up a localized string similar to The string is not well formatted. Expected {0} / {1} or {0} / {1} / {2}.
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.RationalNumber_ArithmeticException">
            <summary>
              Looks up a localized string similar to Cannot convert the string to RationalNumber.
            </summary>
        </member>
        <member name="P:NLib.Resources.RationalNumberResource.Reverse_DivideByZeroException_R">
            <summary>
              Looks up a localized string similar to The numerator must be non-zero.
            </summary>
        </member>
        <member name="T:NLib.Text.Extensions.StringBuilderExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:NLib.Text.Extensions.StringBuilderExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends the format string and adds a line.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object to format.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sb"/> parameter is null.</exception>
        </member>
        <member name="M:NLib.Text.Extensions.StringBuilderExtensions.AppendLineFormat(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the format string and adds a line.
            </summary>
            <param name="sb">The string builder.</param>
            <param name="provider">An object that supplied culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object to format.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sb"/> parameter is null.</exception>
        </member>
        <member name="T:NLib.Xml.Extensions.XmlDocumentExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
        </member>
        <member name="M:NLib.Xml.Extensions.XmlDocumentExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Convert a <see cref="T:System.Xml.XmlDocument"/> to a <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <param name="xmlDocument">The xml document to convert.</param>
            <returns>A new <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="xmlDocument"/> must not be null.</exception>
        </member>
        <member name="T:NLib.Xml.Linq.Extensions.XDocumentExtensions">
            <summary>
            Defines extensions methods for <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
        </member>
        <member name="M:NLib.Xml.Linq.Extensions.XDocumentExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Convert a <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="xdocument">The <see cref="T:System.Xml.Linq.XDocument"/> to convert.</param>
            <returns>A new <see cref="T:System.Xml.XmlDocument"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="xdocument"/> must not be null.</exception>
        </member>
    </members>
</doc>
